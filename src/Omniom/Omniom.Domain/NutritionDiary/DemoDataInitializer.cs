using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Omniom.Domain.Auth.GetUserIdByEmail;
using Omniom.Domain.Auth.RegisterUser;
using Omniom.Domain.Catalogue.Meals.CreatingNewMeal;
using Omniom.Domain.Catalogue.Meals.InitializingModuleData;
using Omniom.Domain.Catalogue.Products.SearchProducts;
using Omniom.Domain.Catalogue.Shared;
using Omniom.Domain.NutritionDiary.AddNutritionEntries;
using Omniom.Domain.NutritionDiary.Storage;
using Omniom.Domain.Nutritionist.RegisteringUserAsNutritionist;
using Omniom.Domain.Shared.BuildingBlocks;

namespace Omniom.Domain.NutritionDiary;

public class DemoDataInitializer
{
    private readonly WebApplication _webApplication;
    private readonly IConfiguration _config;
    private readonly ILogger<DemoDataInitializer> _logger;

    public DemoDataInitializer(WebApplication webApplication, IConfiguration config)
    {
        _webApplication = webApplication;
        _config = config;
        _logger = _webApplication.Services.GetService<ILogger<DemoDataInitializer>>() ?? new Logger<DemoDataInitializer>(new LoggerFactory());
    }

    public async Task SeedApplicationWithDemoData()
    {
        using (var scope = _webApplication.Services.CreateScope())
        {
            if (!_config.GetValue<bool>("Demo:AddDemoData"))
            {
                _logger.LogInformation("Demo data initialization is disabled, skipping");
                return;
            }
            var isAlreadyInitialized = (await GetDemoUsersIdsAsync(scope)).Any();
            if (isAlreadyInitialized)
            {
                _logger.LogInformation("Demo data is already initialized, skipping");
                return;
            }

            await AddDemoUsersAsync(scope);
            var demoUsers = await GetDemoUsersIdsAsync(scope);
            var usersRepository = new UserInfoRepository(demoUsers);
            await AddIndividualDishesAsync(scope, usersRepository);
            await AddNutritionistRegistrationRequests(scope, usersRepository);
            await AddNutritionDiaryEntries(scope, usersRepository);
        }
    }

    private async Task AddIndividualDishesAsync(IServiceScope scope, UserInfoRepository repo)
    {
        var createMealCommandHandler = scope.ServiceProvider.GetRequiredService<ICommandHandler<CreateMealCommand>>();
        var searchProductsQueryHandler = scope.ServiceProvider.GetRequiredService<SearchProductsQueryHandler>();
        var mealInitializer = new MealsInitializer(createMealCommandHandler, searchProductsQueryHandler);
        foreach (var userId in repo.GetAll().Select(x => x.UserId))
            await mealInitializer.SeedMealsCatalogue(userId, 50);
    }

    private async Task AddDemoUsersAsync(IServiceScope scope)
    {
        var usersToAdd = _config.GetSection("Demo:DemoUsersMails").GetChildren().Select(x => x.Value).ToList();
        var addUserCommandHandler = scope.ServiceProvider.GetRequiredService<RegisterUserCommandHandler>();
        foreach (var userToAdd in usersToAdd)
        {
            var command = new UserForRegistrationDto
            {
                Email = userToAdd,
                Password = "zaq1@WSX",
                ConfirmPassword = "zaq1@WSX"
            };
            await addUserCommandHandler.HandleAsync(command, CancellationToken.None);
        }
    }

    private async Task<List<UserInfo>> GetDemoUsersIdsAsync(IServiceScope scope)
    {
        var usersToAddMails = _config.GetSection("Demo:DemoUsersMails").GetChildren().Select(x => x.Value).ToList();
        var getUserIdQueryHandler = scope.ServiceProvider.GetRequiredService<GetUserIdByEmailHandlerQueryHandler>();
        try
        {
            var result = new List<UserInfo>();
            foreach (var userMail in usersToAddMails)
            {
                var userId = await getUserIdQueryHandler.HandleAsync(new GetUserIdByEmailQuery(userMail));
                result.Add(new UserInfo(Guid.Parse(userId), userMail));
            }
            return result;
        }
        catch (Exception e)
        {
            _logger.LogError("Fetching demo users failed with errrr:", e);
            return [];
        }
    }

    private async Task AddNutritionistRegistrationRequests(IServiceScope scope, UserInfoRepository repo)
    {
        var nutritionistMails = _config.GetSection("Demo:NutritonistsMails").GetChildren().Select(x => x.Value).ToList();
        var handler = scope.ServiceProvider.GetRequiredService<ICommandHandler<RegisterNutritionistCommand>>();
        var faker = new Bogus.Faker("pl");
        foreach (var mail in nutritionistMails)
        {
            var request = new RegisterNutritionistRequest
            {
                City = faker.Address.City(),
                Email = mail,
                Name = faker.Name.FirstName(),
                Surname = faker.Name.LastName(),
                TermsAndConditionsAccepted = true,
                Attachments = new List<Nutritionist.Storage.Attachment>
                {
                    new Nutritionist.Storage.Attachment("file1", "data:application/pdf;base64,")
                }
            };
            var command = new RegisterNutritionistCommand(repo.FindByUserMail(mail).UserId, request);
            await handler.HandleAsync(command, CancellationToken.None);
        }
    }

    private async Task AddNutritionDiaryEntries(IServiceScope scope, UserInfoRepository repo)
    {
        var userIds = repo.GetUserGuids();
        var searchProductsQueryHandler = scope.ServiceProvider.GetRequiredService<SearchProductsQueryHandler>();
        var addProductToDiaryCommandHandler = scope.ServiceProvider.GetRequiredService<ICommandHandler<SaveMealNutritionEntriesCommand>>();
        foreach (var userId in userIds)
        {
            await AddNutritionEntries(userId.ToString(), searchProductsQueryHandler, addProductToDiaryCommandHandler, DateTime.Today);
            await AddNutritionEntries(userId.ToString(), searchProductsQueryHandler, addProductToDiaryCommandHandler, DateTime.Today.AddDays(-1));
        }
    }

    private static async Task AddNutritionEntries(string userId,
        SearchProductsQueryHandler searchProducts,
        ICommandHandler<SaveMealNutritionEntriesCommand> addNutritionEntriesCommandHandler,
        DateTime day)
    {
        var products = (await searchProducts.HandleAsync(new SearchProductsQuery(""), CancellationToken.None)).Products
            .OrderBy(x => Guid.NewGuid());
        if (!products.Any())
            return;
        var command = new SaveMealNutritionEntriesCommand(
                       new[]
                       {
                new MealEntry(products.First().Guid, 100, CatalogueItemType.Product),
                new MealEntry(products.Last().Guid, 200, CatalogueItemType.Product)
            },
            MealType.Breakfast,
            day,
            Guid.Parse(userId)
        );
        var command2 = new SaveMealNutritionEntriesCommand(
                       new[]
                       {
                new MealEntry(products.First().Guid, 250, CatalogueItemType.Product),
                new MealEntry(products.Last().Guid, 300, CatalogueItemType.Product)
            },
            MealType.Supper,
            day,
            Guid.Parse(userId)
        );

        await addNutritionEntriesCommandHandler.HandleAsync(command, CancellationToken.None);
        await addNutritionEntriesCommandHandler.HandleAsync(command2, CancellationToken.None);
    }

    private record UserInfo(Guid UserId, string UserMail);

    private class UserInfoRepository
    {
        private readonly IEnumerable<UserInfo> _data;

        public UserInfoRepository(IEnumerable<UserInfo> data)
        {
            _data = data;
        }

        internal IEnumerable<UserInfo> GetAll()
        {
            return _data;
        }

        internal IEnumerable<Guid> GetUserGuids()
        {
            return _data.Select(x => x.UserId).ToList();
        }

        internal IEnumerable<string> GetUserMails()
        {
            return _data.Select(x => x.UserMail).ToList();
        }

        internal UserInfo FindByUserMail(string mail)
        {
            return _data.Single(entry => entry.UserMail == mail);
        }

        internal UserInfo FindByUserGuid(Guid guid)
        {
            return _data.Single(entry => entry.UserId == guid);
        }
    }
}